paramBase$grouplist
aminoAcids()
paramBase$grouplist <- c("A", "C", "D", "E", "F", "G", "H", "I", "K", "L", "N", "P", "Q", "R", "S", "T", "V", "Y", "Z")
paramBase$grouplist
parameter.file.to.fix <- "~/CodonUsageBias/organisms/Lachancea/results/kluyveri/kluyv.main_ROCpar.Rda"
load(parameter.file.to.fix)
aminoAcids()
paramBase$grouplist <- c("A", "C", "D", "E", "F", "G", "H", "I", "K", "L", "N", "P", "Q", "R", "S", "T", "V", "Y", "Z")
save(list = c("paramBase", "currentMutation", "currentSelection",
"proposedMutation", "proposedSelection", "model",
"mutationPrior", "mutationTrace", "selectionTrace",
"synthesisOffsetAcceptRatTrace", "synthesisOffsetTrace",
"observedSynthesisNoiseTrace", "withPhi"),
file=parameter.file.to.fix)
parameter <- loadParameterObject(files = "CodonUsageBias/organisms/Lachancea/results/kluyveri/kluyv.main_ROCpar.Rda")
genome <- initializeGenomeObject(file = "CodonUsageBias/organisms/Lachancea/data/kluyveri/kluyv.main.cds.fasta")
selection.coefficients <- getSelectionCoefficients(genome = genome, parameter = parameter, samples = 1000)
class(parameter)
codon.names <- codons()[-c(62:64)]
codon.names
which(codon.names == "ATG")
which(codon.names == "TGG")
codon.names <- codon.names[-c(30, 57)]
library(AnaCoDa)
genome <- initializeGenomeObject(file = "CodonUsageBias/organisms/Lachancea/data/kluyveri/kluyv.main.cds.fasta")
parameter <- loadParameterObject(files = "CodonUsageBias/organisms/Lachancea/results/kluyveri/kluyv.main_ROCpar.Rda")
selection.coefficients <- getSelectionCoefficients(genome = genome, parameter = parameter, samples = 1000)
parameter.file.to.fix <- "~/CodonUsageBias/organisms/Lachancea/results/kluyveri/kluyv.main_ROCpar.Rda"
load(parameter.file.to.fix)
length(paramBase$mixAssignTrace)
parameter.file.to.fix <- "~/CodonUsageBias/organisms/Lachancea/results/kluyveri/kluyv.main_ROCpar.Rda"
load(parameter.file.to.fix)
paramBase$curMixAssignment
library(AnaCoDa)
genome <- initializeGenomeObject(file = "CodonUsageBias/organisms/Lachancea/data/kluyveri/kluyv.main.cds.fasta")
parameter <- loadParameterObject(files = "CodonUsageBias/organisms/Lachancea/results/kluyveri/kluyv.main_ROCpar.Rda")
selection.coefficients <- getSelectionCoefficients(genome = genome, parameter = parameter, samples = 1000)
library(AnaCoDa)
genome <- initializeGenomeObject(file = "CodonUsageBias/organisms/Lachancea/data/kluyveri/kluyv.main.cds.fasta")
parameter <- loadParameterObject(files = "CodonUsageBias/organisms/Lachancea/results/kluyveri/kluyv.main_ROCpar.Rda")
selection.coefficients <- getSelectionCoefficients(genome = genome, parameter = parameter, samples = 1000)
library(AnaCoDa)
genome <- initializeGenomeObject(file = "CodonUsageBias/organisms/Lachancea/data/kluyveri/kluyv.main.cds.fasta")
parameter <- loadParameterObject(files = "CodonUsageBias/organisms/Lachancea/results/kluyveri/kluyv.main_ROCpar.Rda")
selection.coefficients <- getSelectionCoefficients(genome = genome, parameter = parameter, samples = 1000)
library(AnaCoDa)
genome <- initializeGenomeObject(file = "CodonUsageBias/organisms/Lachancea/data/kluyveri/kluyv.main.cds.fasta")
parameter <- loadParameterObject(files = "CodonUsageBias/organisms/Lachancea/results/kluyveri/kluyv.main_ROCpar.Rda")
selection.coefficients <- getSelectionCoefficients(genome = genome, parameter = parameter, samples = 1000)
library(AnaCoDa)
genome <- initializeGenomeObject(file = "CodonUsageBias/organisms/Lachancea/data/kluyveri/kluyv.main.cds.fasta")
parameter <- loadParameterObject(files = "CodonUsageBias/organisms/Lachancea/results/kluyveri/kluyv.main_ROCpar.Rda")
samples = 100
codon.names <- codons()[-c(62:64)]
codon.names <- codon.names[-c(30, 57)]
gene.names <- getNames(genome)
sel.coef <- parameter$calculateSelectionCoefficients(samples)
View(sel.coef)
codon.names <- codons()[-c(62:64)]
colnames(sel.coef) <- codon.names
rownames(sel.coef) <- gene.names
View(sel.coef)
parameter$getGroupList()
grouplist <- parameter$getGroupList()
codon.names <- NULL
if(class(parameter) == "Rcpp_ROCParameter" || class(parameter) == "Rcpp_FONSEParameter")
{
for(aa in grouplist)
codon.names <- c(codon.names, AAToCodon(aa))
}else{
codon.names <- grouplist
}
sel.coef[4864, ]
AAToCodon("A")
sel.coef[1:10, 1:4]
library(AnaCoDa)
genome <- initializeGenomeObject(file = "CodonUsageBias/organisms/Lachancea/data/kluyveri/kluyv.main.cds.fasta")
parameter <- loadParameterObject(files = "CodonUsageBias/organisms/Lachancea/results/kluyveri/kluyv.main_ROCpar.Rda")
samples = 100
grouplist <- parameter$getGroupList()
codon.names <- NULL
if(class(parameter) == "Rcpp_ROCParameter" || class(parameter) == "Rcpp_FONSEParameter")
{
for(aa in grouplist)
codon.names <- c(codon.names, AAToCodon(aa))
}else{
codon.names <- grouplist
}
gene.names <- getNames(genome)
sel.coef <- parameter$calculateSelectionCoefficients(samples)
View(sel.coef)
dim(sel.coef)
sel.coef[, 1]
getSelectionCoefficients <- function(genome, parameter, samples = 100)
{
sel.coef <- parameter$calculateSelectionCoefficients(samples)
grouplist <- parameter$getGroupList()
codon.names <- NULL
if(class(parameter) == "Rcpp_ROCParameter" || class(parameter) == "Rcpp_FONSEParameter")
{
for(aa in grouplist)
codon.names <- c(codon.names, AAToCodon(aa))
sel.coef <- sel.coef[, -c(60, 61)]
}else{
codon.names <- grouplist
}
gene.names <- getNames(genome)
colnames(sel.coef) <- codon.names
rownames(sel.coef) <- gene.names
return(sel.coef)
}
selection.coefficients <- getSelectionCoefficients(genome = genome, parameter = parameter, samples = 1000)
View(selection.coefficients)
library(AnaCoDa)
genome <- initializeGenomeObject(file = "CodonUsageBias/organisms/Lachancea/data/kluyveri/kluyv.main.cds.fasta")
parameter <- loadParameterObject(files = "CodonUsageBias/organisms/Lachancea/results/kluyveri/kluyv.main_ROCpar.Rda")
selection.coefficients <- getSelectionCoefficients(genome = genome, parameter = parameter, samples = 1000)
View(selection.coefficients)
load("~/Desktop/yeastSalRokSelacGamma.Rdata")
load("~/CodonUsageBias/organisms/Lachancea/results/gossypii/gossypii_fixedSE_ROCParameter.Rda")
load("~/CodonUsageBias/organisms/Lachancea/results/gossypii/gossypii_ROCpar.Rda")
load("~/CodonUsageBias/organisms/Lachancea/results/gossypii/gossypii_fixedSE_ROCParameter.Rda")
library(readr)
gossypii_fixedSE_phi <- read_csv("~/CodonUsageBias/organisms/Lachancea/results/gossypii/gossypii_fixedSE_phi.csv")
View(gossypii_fixedSE_phi)
sd(gossypii_fixedSE_phi$PHI)
sd(gossypii_fixedSE_phi$log10.PHI)
load("~/CodonUsageBias/organisms/Lachancea/results/gossypii/gossypii_fixedSE_MCMC.Rda")
mean(loglikeTrace[4501:5001])
library(readr)
gossypii_phi <- read_csv("~/CodonUsageBias/organisms/Lachancea/results/gossypii/gossypii_phi.csv")
View(gossypii_phi)
sd(gossypii_phi$PHI)
mean(gossypii_phi$PHI)
library(readr)
gossypii_fixedSE_phi <- read_csv("~/CodonUsageBias/organisms/Lachancea/results/gossypii/gossypii_fixedSE_phi.csv")
View(gossypii_fixedSE_phi)
mean(gossypii_fixedSE_phi$PHI)
setwd("~/CodonUsageBias/RibosomeModel/RibModelFramework/tests/testthat")
library(testthat)
library(AnaCoDa)
context("MCMC with ROC")
# This file currently checks the logPosterior recorded at iteration 100, between an old, hard-coded test and a current Unit Test.
# Two tests are run: one with Phi, one without Phi. The existence of the relevant input files is also checked.
# Possible implementation change: take the logPosterior value and hard code it here, and compare via
# mcmc$getLogPosteriorTrace(), which returns a vector. Get the average of these values
# and compare it with the hard-coded average of logPosteriorTrace.
# In R, file.path is faster than paste
fileName = file.path("UnitTestingData", "testMCMCROCFiles", "simulatedAllUniqueR.fasta")
expressionFile = file.path("UnitTestingData", "testMCMCROCFiles", "simulatedAllUniqueR_phi_withPhiSet.csv")
# Ensure the input files exist.
test_that("file exists: simulatedAllUniqueR.fasta", {
expect_equal(file.exists(fileName), T)
})
test_that("file exists: simulatedAllUniqueR_phi_withPhiSet.csv", {
expect_equal(file.exists(expressionFile), T)
})
sphi_init <- c(1,1)
numMixtures <- 2
mixDef <- "allUnique"
samples <- 10
thinning <- 10
adaptiveWidth <- 10
divergence.iteration <- 0
mcmc <- initializeMCMCObject(samples = samples, thinning = thinning, adaptive.width = adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE)
set.seed(446141)
genome <- initializeGenomeObject(file = fileName, observed.expression.file = expressionFile, match.expression.by.id=FALSE)
geneAssignment <- sample(c(1,2), size = length(genome), replace = TRUE, prob = c(0.3, 0.7)) #c(rep(1,500), rep(2,500))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, split.serine = TRUE, mixture.definition = mixDef)
model <- initializeModelObject(parameter, "ROC", with.phi = TRUE)
runMCMC(mcmc, genome, model, 1, divergence.iteration)
setwd("~/CodonUsageBias/organisms/Lachancea")
rm(list=ls())
library(AnaCoDa)
with.phi <- TRUE
fon <- FALSE #fix observation noise
genome.file <- "data/gossypii/gossypii.filtered.cds.fasta"
expression.file <- "data/a_Expression/Egossypii_combined.csv"
out.files <- "results/gossypii/gossypii_restart2_"
if (with.phi) {
genome <- initializeGenomeObject(file = genome.file, observed.expression.file = expression.file)
} else {
genome <- initializeGenomeObject(file = genome.file)
}
numMixtures <- 1
sphi_init <- rep(0.1, numMixtures)
mixDef <- "allUnique"
geneAssignment <- rep(1,length(genome)) #sample(x = 1:2, size = length(genome), replace = T) #
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment,
split.serine = TRUE, mixture.definition = mixDef, init.sepsilon = c(0.01, 0.01, 0.01))
grouplist <- c("A", "C", "D", "E", "F", "G", "H", "I", "K", "L", "N", "P", "Q", "R", "S", "T", "V", "Y", "Z")
parameter$setGroupList(grouplist)
samples <- 400
thining <- 10
adaptiveWidth <- 50
divergence.iteration <- 0
mcmc <- initializeMCMCObject(samples, thining, adaptive.width=adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE, est.mix = TRUE)
model <- initializeModelObject(parameter, "ROC", with.phi = with.phi, fix.observation.noise = fon)
system.time(runMCMC(mcmc, genome, model, 4, divergence.iteration))
setwd("~/CodonUsageBias/organisms/Lachancea")
rm(list=ls())
library(AnaCoDa)
with.phi <- TRUE
fon <- FALSE #fix observation noise
genome.file <- "~/CodonUsageBias/RibosomeModel/RibModelFramework/tests/testthat/UnitTestingData/testMCMCROCFiles/simulatedAllUniqueR.fasta"
expression.file <- "~/CodonUsageBias/RibosomeModel/RibModelFramework/tests/testthat/UnitTestingData/testMCMCROCFiles/simulatedAllUniqueR_phi_withPhiSet.csv"
out.files <- "results/gossypii/gossypii_restart2_"
if (with.phi) {
genome <- initializeGenomeObject(file = genome.file, observed.expression.file = expression.file)
} else {
genome <- initializeGenomeObject(file = genome.file)
}
numMixtures <- 1
sphi_init <- rep(1, numMixtures)
mixDef <- "allUnique"
setwd("~/CodonUsageBias/organisms/Lachancea")
rm(list=ls())
library(AnaCoDa)
with.phi <- TRUE
fon <- FALSE #fix observation noise
genome.file <- "~/CodonUsageBias/RibosomeModel/RibModelFramework/tests/testthat/UnitTestingData/testMCMCROCFiles/simulatedAllUniqueR.fasta"
expression.file <- "~/CodonUsageBias/RibosomeModel/RibModelFramework/tests/testthat/UnitTestingData/testMCMCROCFiles/simulatedAllUniqueR_phi_withPhiSet.csv"
genome <- initializeGenomeObject(file = genome.file, observed.expression.file = expression.file)
genome.file <- "~/CodonUsageBias/RibosomeModel/RibModelFramework/tests/testthat/UnitTestingData/testMCMCROCFiles/simulatedAllUniqueR.fasta"
expression.file <- "~/CodonUsageBias/RibosomeModel/RibModelFramework/tests/testthat/UnitTestingData/testMCMCROCFiles/simulatedAllUniqueR_phi_withPhiSet.csv"
genome <- initializeGenomeObject(file = genome.file, observed.expression.file = expression.file)
setwd("~/CodonUsageBias/RibosomeModel/RibModelFramework/tests/testthat/UnitTestingData/testMCMCROCFiles")
library(testthat)
library(AnaCoDa)
context("MCMC with ROC")
# This file currently checks the logPosterior recorded at iteration 100, between an old, hard-coded test and a current Unit Test.
# Two tests are run: one with Phi, one without Phi. The existence of the relevant input files is also checked.
# Possible implementation change: take the logPosterior value and hard code it here, and compare via
# mcmc$getLogPosteriorTrace(), which returns a vector. Get the average of these values
# and compare it with the hard-coded average of logPosteriorTrace.
# In R, file.path is faster than paste
fileName = file.path("UnitTestingData", "testMCMCROCFiles", "simulatedAllUniqueR.fasta")
expressionFile = file.path("UnitTestingData", "testMCMCROCFiles", "simulatedAllUniqueR_phi_withPhiSet.csv")
# Ensure the input files exist.
test_that("file exists: simulatedAllUniqueR.fasta", {
expect_equal(file.exists(fileName), T)
})
test_that("file exists: simulatedAllUniqueR_phi_withPhiSet.csv", {
expect_equal(file.exists(expressionFile), T)
})
sphi_init <- c(1,1)
numMixtures <- 2
mixDef <- "allUnique"
samples <- 10
thinning <- 10
adaptiveWidth <- 10
divergence.iteration <- 0
mcmc <- initializeMCMCObject(samples = samples, thinning = thinning, adaptive.width = adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE)
setwd("~/CodonUsageBias/RibosomeModel/RibModelFramework/tests/testthat")
library(testthat)
library(AnaCoDa)
context("MCMC with ROC")
# This file currently checks the logPosterior recorded at iteration 100, between an old, hard-coded test and a current Unit Test.
# Two tests are run: one with Phi, one without Phi. The existence of the relevant input files is also checked.
# Possible implementation change: take the logPosterior value and hard code it here, and compare via
# mcmc$getLogPosteriorTrace(), which returns a vector. Get the average of these values
# and compare it with the hard-coded average of logPosteriorTrace.
# In R, file.path is faster than paste
fileName = file.path("UnitTestingData", "testMCMCROCFiles", "simulatedAllUniqueR.fasta")
expressionFile = file.path("UnitTestingData", "testMCMCROCFiles", "simulatedAllUniqueR_phi_withPhiSet.csv")
# Ensure the input files exist.
test_that("file exists: simulatedAllUniqueR.fasta", {
expect_equal(file.exists(fileName), T)
})
test_that("file exists: simulatedAllUniqueR_phi_withPhiSet.csv", {
expect_equal(file.exists(expressionFile), T)
})
sphi_init <- c(1,1)
numMixtures <- 2
mixDef <- "allUnique"
samples <- 10
thinning <- 10
adaptiveWidth <- 10
divergence.iteration <- 0
mcmc <- initializeMCMCObject(samples = samples, thinning = thinning, adaptive.width = adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE)
genome <- initializeGenomeObject(file = fileName, observed.expression.file = expressionFile, match.expression.by.id=FALSE)
genome.file <- "UnitTestingData/testMCMCROCFiles/simulatedAllUniqueR.fasta"
expression.file <- "UnitTestingData/testMCMCROCFiles/simulatedAllUniqueR_phi_withPhiSet.csv"
genome <- initializeGenomeObject(file = genome.file, observed.expression.file = expression.file)
genome <- initializeGenomeObject(file = genome.file, observed.expression.file = expression.file, match.expression.by.id = F)
numMixtures <- 1
sphi_init <- rep(1, numMixtures)
mixDef <- "allUnique"
geneAssignment <- rep(1,length(genome)) #sample(x = 1:2, size = length(genome), replace = T) #
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment,
split.serine = TRUE, mixture.definition = mixDef, init.sepsilon = c(0.01))
samples <- 400
thining <- 10
adaptiveWidth <- 50
divergence.iteration <- 0
mcmc <- initializeMCMCObject(samples, thining, adaptive.width=adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE, est.mix = TRUE)
model <- initializeModelObject(parameter, "ROC", with.phi = with.phi, fix.observation.noise = fon)
system.time(runMCMC(mcmc, genome, model, 4, divergence.iteration))
setwd("~/CodonUsageBias/organisms/Lachancea")
rm(list=ls())
library(AnaCoDa)
with.phi <- TRUE
fon <- FALSE #fix observation noise
genome.file <- "UnitTestingData/testMCMCROCFiles/simulatedAllUniqueR.fasta"
expression.file <- "UnitTestingData/testMCMCROCFiles/simulatedAllUniqueR_phi_withPhiSet.csv"
out.files <- "results/gossypii/gossypii_restart2_"
if (with.phi) {
genome <- initializeGenomeObject(file = genome.file, observed.expression.file = expression.file, match.expression.by.id = F)
} else {
genome <- initializeGenomeObject(file = genome.file)
}
setwd("~/CodonUsageBias/RibosomeModel/RibModelFramework/tests/testthat")
rm(list=ls())
library(AnaCoDa)
with.phi <- TRUE
fon <- FALSE #fix observation noise
genome.file <- "UnitTestingData/testMCMCROCFiles/simulatedAllUniqueR.fasta"
expression.file <- "UnitTestingData/testMCMCROCFiles/simulatedAllUniqueR_phi_withPhiSet.csv"
genome <- initializeGenomeObject(file = genome.file, observed.expression.file = expression.file, match.expression.by.id = F)
numMixtures <- 1
sphi_init <- rep(1, numMixtures)
mixDef <- "allUnique"
geneAssignment <- rep(1,length(genome)) #sample(x = 1:2, size = length(genome), replace = T) #
#init.phi <- read.csv(file = "results/gossypii/gossypii_restart_from_fixedSE2_phi.csv", header = T, as.is=T)[,2]
#parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, initial.expression.values = init.phi,
#                                       split.serine = TRUE, mixture.definition = mixDef, init.sepsilon = c(0.01, 0.01, 0.01))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment,
split.serine = TRUE, mixture.definition = mixDef, init.sepsilon = c(0.01))
samples <- 400
thining <- 10
adaptiveWidth <- 50
divergence.iteration <- 0
mcmc <- initializeMCMCObject(samples, thining, adaptive.width=adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE, est.mix = TRUE)
model <- initializeModelObject(parameter, "ROC", with.phi = with.phi, fix.observation.noise = fon)
system.time(runMCMC(mcmc, genome, model, 4, divergence.iteration))
rm(list=ls())
library(AnaCoDa)
with.phi <- TRUE
fon <- FALSE #fix observation noise
genome.file <- "UnitTestingData/testMCMCROCFiles/simulatedAllUniqueR.fasta"
expression.file <- "UnitTestingData/testMCMCROCFiles/simulatedAllUniqueR_phi_withPhiSet.csv"
genome <- initializeGenomeObject(file = genome.file)
numMixtures <- 1
sphi_init <- rep(1, numMixtures)
mixDef <- "allUnique"
geneAssignment <- rep(1,length(genome)) #sample(x = 1:2, size = length(genome), replace = T) #
#init.phi <- read.csv(file = "results/gossypii/gossypii_restart_from_fixedSE2_phi.csv", header = T, as.is=T)[,2]
#parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, initial.expression.values = init.phi,
#                                       split.serine = TRUE, mixture.definition = mixDef, init.sepsilon = c(0.01, 0.01, 0.01))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment,
split.serine = TRUE, mixture.definition = mixDef, init.sepsilon = c(0.01))
samples <- 400
thining <- 10
adaptiveWidth <- 50
divergence.iteration <- 0
mcmc <- initializeMCMCObject(samples, thining, adaptive.width=adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE, est.mix = TRUE)
model <- initializeModelObject(parameter, "ROC", with.phi = with.phi, fix.observation.noise = fon)
system.time(runMCMC(mcmc, genome, model, 4, divergence.iteration))
genome <- initializeGenomeObject(file = genome.file, observed.expression.file = expression.file, match.expression.by.id = F)
model <- initializeModelObject(parameter, "ROC", with.phi = with.phi, fix.observation.noise = fon)
system.time(runMCMC(mcmc, genome, model, 4, divergence.iteration))
setwd("~/CodonUsageBias/organisms/Lachancea")
rm(list=ls())
library(AnaCoDa)
with.phi <- TRUE
fon <- FALSE #fix observation noise
genome.file <- "UnitTestingData/testMCMCROCFiles/simulatedAllUniqueR.fasta"
expression.file <- "UnitTestingData/testMCMCROCFiles/simulatedAllUniqueR_phi_withPhiSet.csv"
genome <- initializeGenomeObject(file = genome.file, observed.expression.file = expression.file, match.expression.by.id = F)
setwd("~/CodonUsageBias/RibosomeModel/RibModelFramework/tests/testthat")
rm(list=ls())
library(AnaCoDa)
with.phi <- TRUE
fon <- FALSE #fix observation noise
genome.file <- "UnitTestingData/testMCMCROCFiles/simulatedAllUniqueR.fasta"
expression.file <- "UnitTestingData/testMCMCROCFiles/simulatedAllUniqueR_phi_withPhiSet.csv"
genome <- initializeGenomeObject(file = genome.file, observed.expression.file = expression.file, match.expression.by.id = F)
numMixtures <- 1
sphi_init <- rep(1, numMixtures)
mixDef <- "allUnique"
geneAssignment <- rep(1,length(genome)) #sample(x = 1:2, size = length(genome), replace = T) #
#init.phi <- read.csv(file = "results/gossypii/gossypii_restart_from_fixedSE2_phi.csv", header = T, as.is=T)[,2]
#parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, initial.expression.values = init.phi,
#                                       split.serine = TRUE, mixture.definition = mixDef, init.sepsilon = c(0.01, 0.01, 0.01))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment,
split.serine = TRUE, mixture.definition = mixDef, init.sepsilon = c(0.01))
samples <- 400
thining <- 10
adaptiveWidth <- 50
divergence.iteration <- 0
mcmc <- initializeMCMCObject(samples, thining, adaptive.width=adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE, est.mix = TRUE)
model <- initializeModelObject(parameter, "ROC", with.phi = with.phi, fix.observation.noise = fon)
system.time(runMCMC(mcmc, genome, model, 4, divergence.iteration))
rm(list=ls())
library(AnaCoDa)
with.phi <- TRUE
fon <- FALSE #fix observation noise
genome.file <- "UnitTestingData/testMCMCROCFiles/simulatedAllUniqueR.fasta"
expression.file <- "UnitTestingData/testMCMCROCFiles/simulatedAllUniqueR_phi_withPhiSet.csv"
genome <- initializeGenomeObject(file = genome.file)
numMixtures <- 1
sphi_init <- rep(1, numMixtures)
mixDef <- "allUnique"
geneAssignment <- rep(1,length(genome)) #sample(x = 1:2, size = length(genome), replace = T) #
#init.phi <- read.csv(file = "results/gossypii/gossypii_restart_from_fixedSE2_phi.csv", header = T, as.is=T)[,2]
#parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, initial.expression.values = init.phi,
#                                       split.serine = TRUE, mixture.definition = mixDef, init.sepsilon = c(0.01, 0.01, 0.01))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment,
split.serine = TRUE, mixture.definition = mixDef, init.sepsilon = c(0.01))
samples <- 400
thining <- 10
adaptiveWidth <- 50
divergence.iteration <- 0
mcmc <- initializeMCMCObject(samples, thining, adaptive.width=adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE, est.mix = TRUE)
model <- initializeModelObject(parameter, "ROC", with.phi = with.phi, fix.observation.noise = fon)
system.time(runMCMC(mcmc, genome, model, 4, divergence.iteration))
genome <- initializeGenomeObject(file = genome.file, observed.expression.file = expression.file, match.expression.by.id = F)
length(genome)
samples <- 400
thining <- 10
adaptiveWidth <- 50
divergence.iteration <- 0
mcmc <- initializeMCMCObject(samples, thining, adaptive.width=adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE, est.mix = TRUE)
model <- initializeModelObject(parameter, "ROC", with.phi = with.phi, fix.observation.noise = fon)
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment,
split.serine = TRUE, mixture.definition = mixDef, init.sepsilon = c(0.01))
system.time(runMCMC(mcmc, genome, model, 4, divergence.iteration))
rm(list=ls())
library(AnaCoDa)
with.phi <- TRUE
fon <- FALSE #fix observation noise
genome.file <- "UnitTestingData/testMCMCROCFiles/simulatedAllUniqueR.fasta"
expression.file <- "UnitTestingData/testMCMCROCFiles/simulatedAllUniqueR_phi_withPhiSet.csv"
if (with.phi) {
genome <- initializeGenomeObject(file = genome.file, observed.expression.file = expression.file, match.expression.by.id = F)
} else {
genome <- initializeGenomeObject(file = genome.file)
}
umMixtures <- 1
sphi_init <- rep(1, numMixtures)
mixDef <- "allUnique"
geneAssignment <- rep(1,length(genome)) #sample(x = 1:2, size = length(genome), replace = T) #
#init.phi <- read.csv(file = "results/gossypii/gossypii_restart_from_fixedSE2_phi.csv", header = T, as.is=T)[,2]
#parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, initial.expression.values = init.phi,
#                                       split.serine = TRUE, mixture.definition = mixDef, init.sepsilon = c(0.01, 0.01, 0.01))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment,
split.serine = TRUE, mixture.definition = mixDef, init.sepsilon = c(0.01))
samples <- 400
thining <- 10
adaptiveWidth <- 50
divergence.iteration <- 0
mcmc <- initializeMCMCObject(samples, thining, adaptive.width=adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE, est.mix = TRUE)
model <- initializeModelObject(parameter, "ROC", with.phi = with.phi, fix.observation.noise = fon)
numMixtures <- 1
sphi_init <- rep(1, numMixtures)
mixDef <- "allUnique"
geneAssignment <- rep(1,length(genome)) #sample(x = 1:2, size = length(genome), replace = T) #
#init.phi <- read.csv(file = "results/gossypii/gossypii_restart_from_fixedSE2_phi.csv", header = T, as.is=T)[,2]
#parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, initial.expression.values = init.phi,
#                                       split.serine = TRUE, mixture.definition = mixDef, init.sepsilon = c(0.01, 0.01, 0.01))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment,
split.serine = TRUE, mixture.definition = mixDef, init.sepsilon = c(0.01))
samples <- 400
thining <- 10
adaptiveWidth <- 50
divergence.iteration <- 0
mcmc <- initializeMCMCObject(samples, thining, adaptive.width=adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE, est.mix = TRUE)
model <- initializeModelObject(parameter, "ROC", with.phi = with.phi, fix.observation.noise = fon)
system.time(runMCMC(mcmc, genome, model, 4, divergence.iteration))
rm(list=ls())
library(AnaCoDa)
with.phi <- TRUE
fon <- FALSE #fix observation noise
genome.file <- "UnitTestingData/testMCMCROCFiles/simulatedAllUniqueR.fasta"
expression.file <- "UnitTestingData/testMCMCROCFiles/simulatedAllUniqueR_phi_withPhiSet.csv"
if (with.phi) {
genome <- initializeGenomeObject(file = genome.file, observed.expression.file = expression.file, match.expression.by.id = F)
} else {
genome <- initializeGenomeObject(file = genome.file)
}
numMixtures <- 2
sphi_init <- rep(1, numMixtures)
mixDef <- "allUnique"
geneAssignment <- rep(1,length(genome)) #sample(x = 1:2, size = length(genome), replace = T) #
#init.phi <- read.csv(file = "results/gossypii/gossypii_restart_from_fixedSE2_phi.csv", header = T, as.is=T)[,2]
#parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, initial.expression.values = init.phi,
#                                       split.serine = TRUE, mixture.definition = mixDef, init.sepsilon = c(0.01, 0.01, 0.01))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment,
split.serine = TRUE, mixture.definition = mixDef, init.sepsilon = c(0.01))
geneAssignment <- sample(x = 1:numMixtures, size = length(genome), replace = T) #
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment,
split.serine = TRUE, mixture.definition = mixDef, init.sepsilon = c(0.01))
samples <- 400
thining <- 10
adaptiveWidth <- 50
divergence.iteration <- 0
mcmc <- initializeMCMCObject(samples, thining, adaptive.width=adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE, est.mix = TRUE)
model <- initializeModelObject(parameter, "ROC", with.phi = with.phi, fix.observation.noise = fon)
system.time(runMCMC(mcmc, genome, model, 4, divergence.iteration))
