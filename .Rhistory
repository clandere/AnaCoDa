write.tree(phy, file = paste(simfolder, sim.name, "_sites_", nsites, "_taxa_", ntips, ".nwk", sep=""))
write.table(x = param.mat, file = paste(simfolder, sim.name, "_sites_", nsites, "_taxa_", ntips, ".csv", sep=""),
quote = F, sep = ",", row.names = F, col.names = T)
}
## SETUP
setwd("~/SELAC/selacHMM_R")
rm(list = ls())
if(F){
library(selac)
}else{
library(ape)
library(expm)
library(nnet)
library(nloptr)
library(seqinr)
library(phangorn)
library(MASS)
library(parallel)
library(deSolve)
dyn.load(x = "../selac/src/selacHMM.so")
source("../selac/R/selac.R")
source("../selac/R/selacSim.R")
}
hmm <- T
sim.name <- "simulatedHMM"
codon.freq.by.aa <- NULL
codon.freq.by.gene <- NULL
load("frequency_Rda/influenza_all_unpassaged_HA_aln_A_H1N1.Rda")
nsim <- 10
all.params <- data.frame(matrix(NA, ncol=nsim+1, nrow=17))
colnames(all.params) <- c("PARAM", paste("SIM", 1:nsim))
parameter.names <- c("C.q.phi.Ne", "alpha", "beta", "C_A", "G_A", "T_A", "A_C", "G_C", "T_C", "A_G", "C_G", "A_T", "C_T", "G_T", "shape.gamma", "sel.reg", "importance")
all.params[,1] <- parameter.names
for(i in 1:nsim)
{
simfolder <- paste("simulation", i, "/", sep="")
# PARAMETERS
nsites <- 100
c.phi.q.Ne <- runif(n = 1, min = 0, max = 4)
gamma.a <- runif(n = 1, min = 0, max = 5)
sel.change <- runif(n = 1, min = 0, max = 2)
importance <- runif(n = 1, min = 0, max = 5)
alpha <- runif(n = 1, min = 1, max = 3)
beta <- runif(n = 1, min = 0, max = 1)
nuc.freq <- runif(n = 4)
nuc.freq <- (nuc.freq/sum(nuc.freq))[-4]
mut.rates <- runif(n = 8, min = 0, max = 2)
ntips <- 10
phy <- rtree(n = ntips)
#phy <- drop.tip(phy, tip = sample(x = 1:(ntips*10), size = (ntips*10)-ntips))
pars <- c(c.phi.q.Ne, alpha, beta, nuc.freq, mut.rates, gamma.a, sel.change, importance)
all.params[,i+1] <- pars
#pars <- c(4*4e-7*.5*5e6, 1.829272, 0.101799, .25, .25, .25, rep(1,8), 0.01, 1, 1.2)
# SIMULATION
if(hmm)
{
sim.dat <- SelacHMMSimulator(phy = phy, pars = pars, nsites = nsites, include.gamma = T, nuc.model = "UNREST", diploid = F,
codon.freq.by.aa = codon.freq.by.aa, codon.freq.by.gene = codon.freq.by.gene, ncats = 8)
param.mat <- data.frame(NAME=parameter.names, VALUES=pars)
}else{
aa.optim <- c("A", "P", "S", "Q", "R", "Y", "K", "L", "T", "V")
sim.dat <- SelacSimulator(phy = phy, pars = pars[-(16:17)], aa.optim_array = aa.optim, include.gamma = T, nuc.model = "UNREST", diploid = T,
codon.freq.by.aa = codon.freq.by.aa, codon.freq.by.gene = codon.freq.by.gene)
param.mat <- data.frame(NAME=parameter.names[-(16:17)], VALUES=pars[-(16:17)])
}
sequences <- vector("list", nrow(sim.dat))
for(i in 1:nrow(sim.dat)){
sequences[[i]] <- sim.dat[i,]
}
seq.names <- paste("simulated_seq", 1:nrow(sim.dat), sep="")
# OUTPUT
if(!file.exists(simfolder)){
dir.create(simfolder)
}
seqinr::write.fasta(sequences = sequences, names = seq.names, file.out = paste(simfolder, sim.name, "_sites_", nsites, "_taxa_", ntips, ".fasta", sep=""))
write.tree(phy, file = paste(simfolder, sim.name, "_sites_", nsites, "_taxa_", ntips, ".nwk", sep=""))
write.table(x = param.mat, file = paste(simfolder, sim.name, "_sites_", nsites, "_taxa_", ntips, ".csv", sep=""),
quote = F, sep = ",", row.names = F, col.names = T)
}
write.table(x = all.params, file = paste(sim.name, "_sites_", nsites, "_taxa_", ntips, "_summary.csv", sep=""),
quote = F, sep = ",", row.names = F, col.names = T)
## SETUP
setwd("~/SELAC/selacHMM_R")
rm(list = ls())
if(F){
library(selac)
}else{
library(ape)
library(expm)
library(nnet)
library(nloptr)
library(seqinr)
library(phangorn)
library(MASS)
library(parallel)
library(deSolve)
dyn.load(x = "../selac/src/selacHMM.so")
source("../selac/R/selac.R")
source("../selac/R/selacSim.R")
}
hmm <- T
sim.name <- "simulatedHMM_test"
codon.freq.by.aa <- NULL
codon.freq.by.gene <- NULL
load("frequency_Rda/influenza_all_unpassaged_HA_aln_A_H1N1.Rda")
nsim <- 10
all.params <- data.frame(matrix(NA, ncol=nsim+1, nrow=17))
colnames(all.params) <- c("PARAM", paste("SIM", 1:nsim))
parameter.names <- c("C.q.phi.Ne", "alpha", "beta", "C_A", "G_A", "T_A", "A_C", "G_C", "T_C", "A_G", "C_G", "A_T", "C_T", "G_T", "shape.gamma", "sel.reg", "importance")
all.params[,1] <- parameter.names
for(i in 1:nsim)
{
simfolder <- paste("simulation_test", i, "/", sep="")
# PARAMETERS
nsites <- 100
c.phi.q.Ne <- runif(n = 1, min = 0, max = 4)
gamma.a <- runif(n = 1, min = 0, max = 5)
sel.change <- runif(n = 1, min = 0, max = 2)
importance <- runif(n = 1, min = 0, max = 5)
alpha <- runif(n = 1, min = 1, max = 3)
beta <- runif(n = 1, min = 0, max = 1)
nuc.freq <- runif(n = 4)
nuc.freq <- (nuc.freq/sum(nuc.freq))[-4]
mut.rates <- runif(n = 8, min = 0, max = 2)
ntips <- 10
phy <- rtree(n = ntips)
#phy <- drop.tip(phy, tip = sample(x = 1:(ntips*10), size = (ntips*10)-ntips))
pars <- c(c.phi.q.Ne, alpha, beta, nuc.freq, mut.rates, gamma.a, sel.change, importance)
all.params[,i+1] <- pars
#pars <- c(4*4e-7*.5*5e6, 1.829272, 0.101799, .25, .25, .25, rep(1,8), 0.01, 1, 1.2)
# SIMULATION
if(hmm)
{
sim.dat <- SelacHMMSimulator(phy = phy, pars = pars, nsites = nsites, include.gamma = T, nuc.model = "UNREST", diploid = F,
codon.freq.by.aa = codon.freq.by.aa, codon.freq.by.gene = codon.freq.by.gene, ncats = 8)
param.mat <- data.frame(NAME=parameter.names, VALUES=pars)
}else{
aa.optim <- c("A", "P", "S", "Q", "R", "Y", "K", "L", "T", "V")
sim.dat <- SelacSimulator(phy = phy, pars = pars[-(16:17)], aa.optim_array = aa.optim, include.gamma = T, nuc.model = "UNREST", diploid = T,
codon.freq.by.aa = codon.freq.by.aa, codon.freq.by.gene = codon.freq.by.gene)
param.mat <- data.frame(NAME=parameter.names[-(16:17)], VALUES=pars[-(16:17)])
}
sequences <- vector("list", nrow(sim.dat))
for(i in 1:nrow(sim.dat)){
sequences[[i]] <- sim.dat[i,]
}
seq.names <- paste("simulated_seq", 1:nrow(sim.dat), sep="")
# OUTPUT
if(!file.exists(simfolder)){
dir.create(simfolder)
}
seqinr::write.fasta(sequences = sequences, names = seq.names, file.out = paste(simfolder, sim.name, "_sites_", nsites, "_taxa_", ntips, ".fasta", sep=""))
write.tree(phy, file = paste(simfolder, sim.name, "_sites_", nsites, "_taxa_", ntips, ".nwk", sep=""))
write.table(x = param.mat, file = paste(simfolder, sim.name, "_sites_", nsites, "_taxa_", ntips, ".csv", sep=""),
quote = F, sep = ",", row.names = F, col.names = T)
}
write.table(x = all.params, file = paste(sim.name, "_sites_", nsites, "_taxa_", ntips, "_summary.csv", sep=""),
quote = F, sep = ",", row.names = F, col.names = T)
yinit[[anc[i]]]
p
range(p)
sim.codon.data.site[des[i]]
root.value
## SETUP
setwd("~/SELAC/selacHMM_R")
rm(list = ls())
if(F){
library(selac)
}else{
library(ape)
library(expm)
library(nnet)
library(nloptr)
library(seqinr)
library(phangorn)
library(MASS)
library(parallel)
library(deSolve)
dyn.load(x = "../selac/src/selacHMM.so")
source("../selac/R/selac.R")
source("../selac/R/selacSim.R")
}
hmm <- T
sim.name <- "simulatedHMM"
codon.freq.by.aa <- NULL
codon.freq.by.gene <- NULL
load("frequency_Rda/influenza_all_unpassaged_HA_aln_A_H1N1.Rda")
nsim <- 10
all.params <- data.frame(matrix(NA, ncol=nsim+1, nrow=17))
colnames(all.params) <- c("PARAM", paste("SIM", 1:nsim))
parameter.names <- c("C.q.phi.Ne", "alpha", "beta", "C_A", "G_A", "T_A", "A_C", "G_C", "T_C", "A_G", "C_G", "A_T", "C_T", "G_T", "shape.gamma", "sel.reg", "importance")
all.params[,1] <- parameter.names
for(i in 1:nsim)
{
simfolder <- paste("simulation", i, "/", sep="")
# PARAMETERS
nsites <- 100
c.phi.q.Ne <- runif(n = 1, min = 0, max = 4)
gamma.a <- runif(n = 1, min = 0, max = 5)
sel.change <- runif(n = 1, min = 0, max = 2)
importance <- runif(n = 1, min = 0, max = 5)
alpha <- runif(n = 1, min = 1, max = 3)
beta <- runif(n = 1, min = 0, max = 1)
nuc.freq <- runif(n = 4)
nuc.freq <- (nuc.freq/sum(nuc.freq))[-4]
mut.rates <- runif(n = 8, min = 0, max = 2)
ntips <- 10
phy <- rtree(n = ntips)
#phy <- drop.tip(phy, tip = sample(x = 1:(ntips*10), size = (ntips*10)-ntips))
pars <- c(c.phi.q.Ne, alpha, beta, nuc.freq, mut.rates, gamma.a, sel.change, importance)
all.params[,i+1] <- pars
#pars <- c(4*4e-7*.5*5e6, 1.829272, 0.101799, .25, .25, .25, rep(1,8), 0.01, 1, 1.2)
# SIMULATION
if(hmm)
{
sim.dat <- SelacHMMSimulator(phy = phy, pars = pars, nsites = nsites, include.gamma = T, nuc.model = "UNREST", diploid = F,
codon.freq.by.aa = codon.freq.by.aa, codon.freq.by.gene = codon.freq.by.gene, ncats = 8)
param.mat <- data.frame(NAME=parameter.names, VALUES=pars)
}else{
aa.optim <- c("A", "P", "S", "Q", "R", "Y", "K", "L", "T", "V")
sim.dat <- SelacSimulator(phy = phy, pars = pars[-(16:17)], aa.optim_array = aa.optim, include.gamma = T, nuc.model = "UNREST", diploid = T,
codon.freq.by.aa = codon.freq.by.aa, codon.freq.by.gene = codon.freq.by.gene)
param.mat <- data.frame(NAME=parameter.names[-(16:17)], VALUES=pars[-(16:17)])
}
sequences <- vector("list", nrow(sim.dat))
for(i in 1:nrow(sim.dat)){
sequences[[i]] <- sim.dat[i,]
}
seq.names <- paste("simulated_seq", 1:nrow(sim.dat), sep="")
# OUTPUT
if(!file.exists(simfolder)){
dir.create(simfolder)
}
seqinr::write.fasta(sequences = sequences, names = seq.names, file.out = paste(simfolder, sim.name, "_sites_", nsites, "_taxa_", ntips, ".fasta", sep=""))
write.tree(phy, file = paste(simfolder, sim.name, "_sites_", nsites, "_taxa_", ntips, ".nwk", sep=""))
write.table(x = param.mat, file = paste(simfolder, sim.name, "_sites_", nsites, "_taxa_", ntips, ".csv", sep=""),
quote = F, sep = ",", row.names = F, col.names = T)
}
write.table(x = all.params, file = paste(sim.name, "_sites_", nsites, "_taxa_", ntips, "_summary.csv", sep=""),
quote = F, sep = ",", row.names = F, col.names = T)
## SETUP
setwd("~/SELAC/selacHMM_R")
rm(list = ls())
if(F){
library(selac)
}else{
library(ape)
library(expm)
library(nnet)
library(nloptr)
library(seqinr)
library(phangorn)
library(MASS)
library(parallel)
library(deSolve)
dyn.load(x = "../selac/src/selacHMM.so")
source("../selac/R/selac.R")
source("../selac/R/selacSim.R")
}
hmm <- T
sim.name <- "simulatedHMM"
codon.freq.by.aa <- NULL
codon.freq.by.gene <- NULL
load("frequency_Rda/influenza_all_unpassaged_HA_aln_A_H1N1.Rda")
nsim <- 10
all.params <- data.frame(matrix(NA, ncol=nsim+1, nrow=17))
colnames(all.params) <- c("PARAM", paste("SIM", 1:nsim))
parameter.names <- c("C.q.phi.Ne", "alpha", "beta", "C_A", "G_A", "T_A", "A_C", "G_C", "T_C", "A_G", "C_G", "A_T", "C_T", "G_T", "shape.gamma", "sel.reg", "importance")
all.params[,1] <- parameter.names
for(i in 1:nsim)
{
simfolder <- paste("simulation", i, "/", sep="")
# PARAMETERS
nsites <- 100
c.phi.q.Ne <- runif(n = 1, min = 0, max = 4)
gamma.a <- runif(n = 1, min = 0, max = 5)
sel.change <- runif(n = 1, min = 0, max = 2)
importance <- runif(n = 1, min = 0, max = 5)
alpha <- runif(n = 1, min = 1, max = 3)
beta <- runif(n = 1, min = 0, max = 1)
nuc.freq <- runif(n = 4)
nuc.freq <- (nuc.freq/sum(nuc.freq))[-4]
mut.rates <- runif(n = 8, min = 0, max = 2)
ntips <- 10
phy <- rtree(n = ntips)
#phy <- drop.tip(phy, tip = sample(x = 1:(ntips*10), size = (ntips*10)-ntips))
pars <- c(c.phi.q.Ne, alpha, beta, nuc.freq, mut.rates, gamma.a, sel.change, importance)
all.params[,i+1] <- pars
#pars <- c(4*4e-7*.5*5e6, 1.829272, 0.101799, .25, .25, .25, rep(1,8), 0.01, 1, 1.2)
# SIMULATION
if(hmm)
{
sim.dat <- SelacHMMSimulator(phy = phy, pars = pars, nsites = nsites, include.gamma = T, nuc.model = "UNREST", diploid = F,
codon.freq.by.aa = codon.freq.by.aa, codon.freq.by.gene = codon.freq.by.gene, ncats = 8)
param.mat <- data.frame(NAME=parameter.names, VALUES=pars)
}else{
aa.optim <- c("A", "P", "S", "Q", "R", "Y", "K", "L", "T", "V")
sim.dat <- SelacSimulator(phy = phy, pars = pars[-(16:17)], aa.optim_array = aa.optim, include.gamma = T, nuc.model = "UNREST", diploid = T,
codon.freq.by.aa = codon.freq.by.aa, codon.freq.by.gene = codon.freq.by.gene)
param.mat <- data.frame(NAME=parameter.names[-(16:17)], VALUES=pars[-(16:17)])
}
sequences <- vector("list", nrow(sim.dat))
for(i in 1:nrow(sim.dat)){
sequences[[i]] <- sim.dat[i,]
}
seq.names <- paste("simulated_seq", 1:nrow(sim.dat), sep="")
# OUTPUT
if(!file.exists(simfolder)){
dir.create(simfolder)
}
seqinr::write.fasta(sequences = sequences, names = seq.names, file.out = paste(simfolder, sim.name, "_sites_", nsites, "_taxa_", ntips, ".fasta", sep=""))
write.tree(phy, file = paste(simfolder, sim.name, "_sites_", nsites, "_taxa_", ntips, ".nwk", sep=""))
write.table(x = param.mat, file = paste(simfolder, sim.name, "_sites_", nsites, "_taxa_", ntips, ".csv", sep=""),
quote = F, sep = ",", row.names = F, col.names = T)
}
write.table(x = all.params, file = paste(sim.name, "_sites_", nsites, "_taxa_", ntips, "_summary.csv", sep=""),
quote = F, sep = ",", row.names = F, col.names = T)
setwd("~/CodonUsageBias/RibosomeModel/AnaCoDa")
install.packages("rmarkdown")
install.packages("devtools")
devtools::use_vignette("my-vignette")
browseVignettes()
?sample.int
sample.int(2, 10)
sample.int(2, 10, replace = T)
matriX(c(1,1,1,2), ncol=2)
matrix(c(1,1,1,2), ncol=2)
def.matrix <- matrix(c(1,1,1,2,1,2), ncol=2)
matrix(c(1,1,1,2,1,2), ncol=2)
matrix(c(1,1,1,2,1,3), ncol=2)
matrix(c(1,1,1,1,2,3), ncol=2)
install.packages("phylolm")
set.seed(123456)
tre = rcoal(60)
taxa = sort(tre$tip.label)
b0=0; b1=1;
x <- rTrait(n=1, phy=tre,model="BM",
parameters=list(ancestral.state=0,sigma2=10))
library(phylolm)
x <- rTrait(n=1, phy=tre,model="BM",
parameters=list(ancestral.state=0,sigma2=10))
y <- b0 + b1*x +
rTrait(n=1,phy=tre,model="lambda",parameters=list(
ancestral.state=0,sigma2=1,lambda=0.5))
dat = data.frame(trait=y[taxa],pred=x[taxa])
fit = phylolm(trait~pred,data=dat,phy=tre,model="lambda")
summary(fit)
?phyl.resid
library(nlme)
library(phytools)
install.packages("maps", dependencies = T)
library(phytools)
install.packages("phytools", dependencies = T)
library(phytools)
install.packages("phytools", dependencies = T)
install.packages("msm", dependencies = T)
install.packages("phytools", dependencies = T)
library(phytools)
install.packages("msm", dependencies = T)
install.packages("phytools", dependencies = T)
library(phytools)
library(AnaCoDa)
parameter <- AnaCoDa::loadParameterObject("~/CodonUsageBias/organisms/Lachancea/results/kluyveri/kluyv.main_ROCpar.Rda")
trace <- parameter$getTraceObject()
plot(x = trace, what = "Mutation")
plot(x = trace, what = "Sphi")
plot(x = trace, what = "Selection")
plot(x = trace, what = "Expression", geneIndex = 103)
plot(x = trace, what = "Expression", geneIndex = 3023)
plot(x = trace, what = "Expression", geneIndex = 1023)
plot(x = trace, what = "Expression", geneIndex = 892)
plot(x = trace, what = "Expression", geneIndex = 1892)
plot(x = trace, what = "Expression", geneIndex = 1852)
plot(x = trace, what = "Expression", geneIndex = 4152)
plot(x = trace, what = "Expression", geneIndex = 400)
plot(x = trace, what = "Expression", geneIndex = 300)
plot(x = trace, what = "Expression", geneIndex = 600)
plot(x = trace, what = "Expression", geneIndex = 669)
model <- initializeModelObject(parameter = parameter, model = "ROC")
plot(x = model)
genome <- initializeGenomeObject(file = "~/CodonUsageBias/organisms/Lachancea/data/kluyveri/kluyv.main.cds.fasta")
genome <- initializeGenomeObject(file = "~/CodonUsageBias/organisms/Lachancea/data/kluyveri/kluyv_main.fasta")
genome <- initializeGenomeObject(file = "~/CodonUsageBias/organisms/Lachancea/data/kluyveri/kluyv_C_left.fasta")
getwd
getwd()
genome <- initializeGenomeObject(file = "../../organisms/Lachancea/data/kluyveri/kluyv_C_left.fasta")
plot(x = model, genome = genome)
genome <- initializeGenomeObject(file = "../../organisms/Lachancea/data/kluyveri/kluyv.main.cds.fasta")
plot(x = model, genome = genome)
mcmc <- loadMCMCObject(files = "~/CodonUsageBias/organisms/Lachancea/results/kluyveri/kluyv.main_MCMC.Rda)
mcmc <- loadMCMCObject(files = "~/CodonUsageBias/organisms/Lachancea/results/kluyveri/kluyv.main_MCMC.Rda")
plot(mcmc)
plot(mcmc, what = "LogPosterior")
plot(mcmc, what = "LogLikelihood")
mcmc <- loadMCMCObject(files = "~/CodonUsageBias/organisms/Lachancea/results/cerevisiae/cerev_MCMC.Rda")
plot(mcmc, what = "LogLikelihood")
plot(mcmc, what = "LogPosterior")
mcmc <- loadMCMCObject(files = "~/CodonUsageBias/organisms/Lachancea/results/gossypii/gossypii_5_allUnique_MCMCObject.Rda")
plot(mcmc, what = "LogPosterior")
mcmc <- loadMCMCObject(files = "~/CodonUsageBias/organisms/Lachancea/results/gossypii/gossypii_fixedSE_MCMC.Rda")
plot(mcmc, what = "LogPosterior")
mcmc <- loadMCMCObject(files = "~/CodonUsageBias/organisms/Lachancea/results/thermotolerans/thermotol_MCMC.Rda")
plot(mcmc, what = "LogPosterior")
mcmc <- loadMCMCObject(files = "~/CodonUsageBias/organisms/Lachancea/results/stipitis/stipitis_MCMC.Rda")
plot(mcmc, what = "LogPosterior")
mcmc <- loadMCMCObject(files = "~/CodonUsageBias/organisms/Lachancea/results/quebecensis/quebec_MCMC.Rda")
plot(mcmc, what = "LogPosterior")
plot(mcmc, what = "LogLikelihood")
getCSPEstimates(parameter = parameter, CSP="Mutation", mixture = 1, samples = 1000)
getCSPEstimates <- function(parameter, filename=NULL, CSP="Mutation", mixture = 1, samples = 10){
Amino_Acid <- c()
Value <- c()
Codon <- c()
quantile_list <- vector("list")
if (class(parameter) == "Rcpp_ROCParameter" || class(parameter) == "Rcpp_FONSEParameter"){
names.aa <- aminoAcids()
for(aa in names.aa){
if(aa == "M" || aa == "W" || aa == "X") next
codons <- AAToCodon(aa, T)
for(i in 1:length(codons)){
Amino_Acid <- c(Amino_Acid, aa)
Codon <- c(Codon, codons[i])
if(CSP == "Mutation"){
Value <- c(Value, parameter$getCodonSpecificPosteriorMean(mixture, samples, codons[i], 0, TRUE))
quantile_list <- c(quantile_list, parameter$getCodonSpecificQuantile(mixture, samples, codons[i], 0, c(0.025, 0.975), TRUE))
}
else if(CSP == "Selection"){
Value <- c(Value, parameter$getCodonSpecificPosteriorMean(mixture, samples, codons[i], 1, TRUE))
quantile_list <- c(quantile_list, parameter$getCodonSpecificQuantile(mixture, samples, codons[i], 1, c(0.025, 0.975), TRUE))
}
else {
stop("Unknown parameter type given with argument: CSP")
}
else if (class(parameter) == "Rcpp_PAParameter"){
groupList <- parameter$getGroupList()
for(i in 1:length(groupList)){
aa <- codonToAA(groupList[i])
Codon <- c(Codon, groupList[i])
Amino_Acid <- c(Amino_Acid, aa)
if(CSP == "Alpha"){
Value <- c(Value, parameter$getCodonSpecificPosteriorMean(mixture, samples, codons[i], 0, FALSE))
quantile_list <- c(quantile_list, parameter$getCodonSpecificQuantile(mixture, samples, codons[i], 0, c(0.025, 0.975), FALSE))
}
else if(CSP == "Lambda Prime"){
Value <- c(Value, parameter$getCodonSpecificPosteriorMean(mixture, samples, codons[i], 1, FALSE))
quantile_list <- c(quantile_list, parameter$getCodonSpecificQuantile(mixture, samples, codons[i], 1, c(0.025, 0.975), FALSE))
}
else {
stop("Unknown parameter type given with argument: CSP")
}
else if (class(parameter) == "Rcpp_PANSEParameter"){
groupList <- parameter$getGroupList()
for(i in 1:length(groupList)){
aa <- codonToAA(groupList[i])
Codon <- c(Codon, groupList[i])
Amino_Acid <- c(Amino_Acid, aa)
if(CSP == "Alpha"){
Value <- c(Value, parameter$getCodonSpecificPosteriorMean(mixture, samples, codons[i], 0, FALSE))
quantile_list <- c(quantile_list, parameter$getCodonSpecificQuantile(mixture, samples, codons[i], 0, c(0.025, 0.975), FALSE))
}
else if(CSP == "Lambda Prime"){
Value <- c(Value, parameter$getCodonSpecificPosteriorMean(mixture, samples, codons[i], 1, FALSE))
quantile_list <- c(quantile_list, parameter$getCodonSpecificQuantile(mixture, samples, codons[i], 1, c(0.025, 0.975), FALSE))
}
else {
stop("Unknown parameter type given with argument: CSP")
}
else{
stop("Unknown object provided with argument: parameter")
}
quantile_list <- matrix(unlist(quantile_list), nrow = 2)
data <- data.frame(Amino_Acid, Codon, Value, Lower=quantile_list[1,], Upper=quantile_list[2,])
colnames(data) <- c("AA", "Codon", "Posterior", "0.025%", "0.975%")
if(is.null(filename))
{
return(data)
}else {
write.csv(data, file = filename, row.names = FALSE, quote=FALSE)
}
getCSPEstimates(parameter = parameter, CSP="Mutation", mixture = 1, samples = 1000)
csp_mat <- getCSPEstimates(parameter = parameter, CSP="Mutation", mixture = 1, samples = 1000)
head(csp_mat)
class(csp_mat)
phi_mat <- getExpressionEstimatesForMixture(parameter = parameter, gene.index = 1:length(genome), mixtureAssignment = rep(1,length(genome)))
phi_mat <- getExpressionEstimatesForMixture(parameter = parameter,
gene.index = 1:length(genome),
mixtureAssignment = rep(1,length(genome)),
samples = 1000)
getExpressionEstimatesForMixture <- function(parameter, gene.index, mixtureAssignment, samples)
{
expressionValues <- unlist(lapply(gene.index, function(geneIndex){
expressionCategory <- parameter$getSynthesisRateCategoryForMixture(mixtureAssignment[geneIndex])
parameter$getSynthesisRatePosteriorMeanByMixtureElementForGene(samples, geneIndex, expressionCategory)
}))
expressionStdErr <- sqrt(unlist(lapply(gene.index, function(geneIndex){
expressionCategory <- parameter$getSynthesisRateCategoryForMixture(mixtureAssignment[geneIndex])
parameter$getSynthesisRateVarianceByMixtureElementForGene(samples, geneIndex, expressionCategory, T)
}))) / samples
expr.mat <- cbind(expressionValues, expressionStdErr)
colnames(expr.mat) <- c("PHI", "Std_Error")
return(expr.mat)
}
phi_mat <- getExpressionEstimatesForMixture(parameter = parameter,
gene.index = 1:length(genome),
mixtureAssignment = rep(1,length(genome)),
samples = 1000)
head(phi_mat)
assignment <- getMixtureAssignmentEstimate(parameter = parameter, 1:length(genome), samples = 1000)
head(assignment)
parameter <- AnaCoDa::loadParameterObject("~/CodonUsageBias/organisms/yeast/results/yeast_7mix/mixed_yeast_7mix_allU_ROCParameter_150k.Rda")
plot(parameter)
plot(parameter, what = "Selection")
